#!/bin/bash

#SBATCH --partition=super                                # select partion from 128GB, 256GB, 384GB, GPU and super
#SBATCH --nodes=1                                        # number of nodes requested by user
#SBATCH --time=0-240:00:00                               # run time, format: D-H:M:S (max wallclock time)
#SBATCH --output=serialJob.%j.out                        # standard output file name
#SBATCH --error=serialJob.%j.time                        # standard error output file name
#SBATCH --mail-user=ryan.ohara@utsouthwestern.edu        # specify an email address
#SBATCH --mail-type=FAIL,END                             # send email when job status change (start, end, abortion and etc.)

script_name="/project/GCRB/Banaszynski_lab/shared/scripts/ryan_scripts/DESeq2_pipe_v2.0.job"

#Help function
usage() {
  echo "-h  --Help documentation for $script_name"
  echo "-o  --Full path to output directory."
  echo "-s  --Step to begin pipeline at; choices are { correlate (default), counts, deseq }."
  echo "-e  --Type of sequencing; choices are { single, paired (default) }."
  echo "-g  --Genome to use; choices are { mouse, human }."
  echo "-a  --Alignment type { genomic, RNA (default) } ."
  echo "-b  --Bedfile to use for genomic alignment, usually a bedfile of merged and filtered peaks, madatory if -a genomic."
  echo "-l  --List file of space-separated samples and grouping, see EXAMPLE_DESEQ2_GROUPS.list ."
  echo "-x  --Comparison group1 from EXAMPLE_DESEQ2_GROUPS.list, usually untreated or WT."
  echo "-y  --Comparison group2 from EXAMPLE_DESEQ2_GROUPS.list, usually a treatment or knockout."
  echo "-p  --Prefix for output files, default is to use the name of the listfile."
  echo "-c  --Counts threshold, ie minimum for a gene or region to pass filter, 10 is default, which is appropriate for RNA-seq."
  echo "Example: sbatch $script_name -o /my/wonderful/output/dir/ -s counts -g mouse -a genomic -b WT_and_KO_merged_peaks.bed -l EXAMPLE_DESEQ2_GROUPS.list"
  if [ -f $serialJob.$SLURM_JOB_ID.out ]; then
    mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.out
  fi
  if [ -f $serialJob.$SLURM_JOB_ID.out ]; then
    mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.err
  fi
  exit 1
}

main(){
  OPTIND=1 # Reset OPTIND
  while getopts :o:s:e:g:a:b:l:x:y:p:c:h opt
      do
          case $opt in
              o) dir=$OPTARG;;
              s) step=$OPTARG;;
              e) type=$OPTARG;;
              g) genome=$OPTARG;;
              a) alignment=$OPTARG;;
              b) peaksfile=$OPTARG;;
              l) listfile=$OPTARG;;
              x) groupX=$OPTARG;;
              y) groupY=$OPTARG;;
              p) prefix=$OPTARG;;
              c) countthresh=$OPTARG;;
              h) usage;;
          esac
      done
  shift $(($OPTIND -1))

  #Check for mandatory options.
  if [[ -z $dir ]] || [[ -z $genome ]] || [[ -z $listfile ]] || [[ -z $groupX ]] || [[ -z $groupY ]]; then
      usage
  else
    echo "output directory set to $dir"
    echo "genome set to $genome"
    echo "listfile set to $listfile"
    echo "Comparison group1 set to $groupX"
    echo "Comparison group2 set to $groupY"
  fi

  #Check list file.
  if [ ! -f $listfile ]; then
      echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ the listfile $listfile does not exist"
      mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
      mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
      exit 1
  fi

  bams=$(cut -f 1 -d " " $listfile | awk '{printf "%s",$1" "}' | cut -f 1)

  #Check and set output prefix.
  if [[ -z $prefix ]]; then
    fn=$(basename "${listfile}")
    prefix=${fn%.*}
  fi
  echo "output prefix set to $prefix"

  #Check then make output directory.
  if [ ! -d $dir ]; then
      mkdir $dir
  fi
  if [ ! -d $dir/out_files ]; then
      mkdir $dir/out_files
  fi

  #Check for default options.
  if [[ -z $step ]]; then
    step=correlate
  fi

  if [[ "$step" == "deseq2" ]] || [[ "$step" == "DESEQ" ]]; then
    step=deseq
  fi

  if [[ "$step" == "correlate" ]] || [[ "$step" == "counts" ]] || [[ "$step" == "deseq" ]]; then
    echo "start pipe at step $step"
  else
    echo "BAKA! (╯°□°)╯﻿ $step is not an option"
    usage
  fi

  if [[ -z $type ]]; then
    type=paired
  fi

  if [[ "$type" == "unpaired" ]]; then
    type=single
  fi

  if [[ -z $alignment ]]; then
    alignment=RNA
  fi

  if [[ "$alignment" == "chip" ]] || [[ "$alignment" == "CHIP" ]] || [[ "$alignment" == "ATAC" ]]; then
    alignment=genomic
  fi

  if [[ "$alignment" == "rna" ]]; then
    alignment=RNA
  fi

  if [[ "$alignment" == "RNA" ]] || [[ "$alignment" == "genomic" ]]; then
    echo "alignment set to $alignment"
  else
    echo "BAKA! (╯°□°)╯﻿ $alignment is not an option"
    usage
  fi

  #Sleepy
  sleep $(shuf -i 60-180 -n 1)

  if [[ "$alignment" == "genomic" ]]; then
    if [[ -z $peaksfile ]]; then
      if [[ -d $dir/$genome/MACS2_out/merged_reps ]]; then
        if [[ -f $dir/$genome/MACS2_out/merged_reps/all_samples_merged_peaks_FDR.bed ]]; then
          echo "creating bedfile of peaks from merged reps"
          module load bedtools
          cat $dir/$genome/MACS2_out/merged_reps/*_peaks_FDR.bed | sort -k1,1 -k2,2n | bedtools merge -i - -c 4 -o max \
          > $dir/$genome/MACS2_out/merged_reps/all_samples_merged_peaks_FDR.bed
          module unload bedtools
        fi
        peaksfile="$dir/$genome/MACS2_out/merged_reps/all_samples_merged_peaks_FDR.bed"
        echo "peaks bedfile set to $peaksfile"
      elif [[ -d $dir/$genome/MACS2_out/individual_reps ]]; then
        if [[ -f $dir/$genome/MACS2_out/individual_reps/all_samples_merged_peaks_FDR.bed ]]; then
          echo "creating bedfile of peaks from individual reps"
          module load bedtools
          cat $dir/$genome/MACS2_out/individual_reps/*_peaks_FDR.bed | sort -k1,1 -k2,2n | bedtools merge -i - -c 4 -o max \
          > $dir/$genome/MACS2_out/individual_reps/all_samples_merged_peaks_FDR.bed
          module unload bedtools
        fi
        peaksfile="$dir/$genome/MACS2_out/individual_reps/all_samples_merged_peaks_FDR.bed"
        echo "peaks bedfile set to $peaksfile"
      else
        echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ cannot locate peaks or peaks bedfile"
        mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
        mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
        exit 1
      fi
    else
      echo "peaks bedfile set to $peaksfile"
      if [ ! -f $peaksfile ]; then
          echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ the peaks bedfile $peaksfile does not exist"
          mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
          mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
          exit 1
      fi
    fi
  fi

  ncheck='^[0-9]+$'
  if [[ -z $countthresh ]]; then
    countthresh=10
    echo "using default count threshold of 10"
  elif ! [[ $countthresh =~ $ncheck ]]; then
    echo "BAKA! \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ $countthresh is not a number"
    mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
    mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
    exit 1
  else
    echo "count threshold set to $countthresh"
  fi

  #Set CPUs to use.
  cputhread=$(expr $SLURM_CPUS_ON_NODE - 3)
  if [[ "$cputhread" -gt "64" ]]; then
    cputhread=61
  fi
  echo "using" $cputhread "CPUs of node"
  echo "JOB ID: $SLURM_JOB_ID"

  #Set genome files.
  if [[ "$genome" == "mouse" ]] || [[ "$genome" == "mm" ]] || [[ "$genome" == "mm10" ]]; then
    genome=mouse
    fasta=/project/GCRB/shared/Star_Indexes_2.7.2b/mm10/mm10_and_repeat_families/genome_files/mm10_genome.fa
    annotation=/project/GCRB/shared/Star_Indexes_2.7.2b/mm10/mm10_and_ercc_and_gfp/genome_files/mm10.refGene_and_ERCC_and_markers.gtf
  elif [[ "$genome" == "human" ]] || [[ "$genome" == "hg38" ]]; then
    genome=human
    fasta=/project/GCRB/shared/Star_Indexes_2.7.2b/hg38/genome_files/hg38_genome.fa
    annotation=/project/GCRB/shared/Star_Indexes_2.7.2b/hg38/genome_files/hg38.refGene_and_ERCC_and_markers.gtf
  else
    echo "BAKA! \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ $genome is not a genome option"
    mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
    mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
    exit 1
  fi

  if [ ! -d $dir/$genome ]; then
      mkdir $dir/$genome
  fi
  if [ ! -d $dir/$genome/DESeq2 ]; then
      mkdir $dir/$genome/DESeq2
  fi

  #Correlate bamfiles in listfile
  if [[ "$step" == "correlate" ]] || [[ "$step" == "counts" ]] || [[ "$step" == "deseq" ]]; then
    if [ ! -f $dir/$genome/DESeq2/$prefix\_pearson_correlation.pdf ]; then
      if [ ! -f $dir/$genome/DESeq2/$prefix.tempfile0 ]; then
        echo "this too \(∘⁼̴⃙̀˘ ^ ˘⁼̴⃙́∘ )/ will fade" > $dir/$genome/DESeq2/$prefix.tempfile0
        module load deeptools

        multiBamSummary bins \
        --bamfiles $bams \
        --numberOfProcessors $cputhread \
        --smartLabels \
        -o $dir/$genome/DESeq2/$prefix\_multiBamSummary.npz

        plotCorrelation \
        -in $dir/$genome/DESeq2/$prefix\_multiBamSummary.npz \
        --corMethod pearson --skipZeros --removeOutliers \
        --plotTitle "Pearson Correlation of $prefix Read Counts" \
        --whatToPlot heatmap --colorMap RdYlBu --plotNumbers \
        -o $dir/$genome/DESeq2/$prefix\_pearson_correlation.pdf

        module unload deeptools

        if [ ! -f $dir/$genome/DESeq2/$prefix\_pearson_correlation.pdf ]; then
          echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ creating $dir/$genome/DESeq2/$prefix\_pearson_correlation.pdf "
          mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
          mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
          exit 1
        fi

        rm $dir/$genome/DESeq2/$prefix\_multiBamSummary.npz
        rm $dir/$genome/DESeq2/$prefix.tempfile0
      fi
    fi
  fi

  #Create peaks.saf
#  if [[ "$step" == "counts" ]]; then
#    if [[ "$alignment" == "genomic" ]]; then
#      module load bedtools
#
#      fn=$(basename "${peaksfile}")
#      peaksname=${fn%.*}
#
#      grep -w \
#      'chr1\|chr2\|chr3\|chr4\|chr5\|chr6\|chr7\|chr8\|chr9\|chr10\|chr11\|chr12\|chr13\|chr14\|chr15\|chr16\|chr17\|chr18\|chr19\|chr20\|chr21\|chr22\|chrX\|chrY' \
#      $peaksfile \
#      | bedtools merge -i - \
#      > $dir/$genome/DESeq2/$peaksname.bed
#
#      if [ ! -f $dir/$genome/DESeq2/$peaksname.bed ]; then
#          echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ filtering peaks bedfile"
#          mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
#          mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
#          exit 1
#      fi
#
#      awk 'BEGIN{OFS="\t"} {print "GeneID","Chr","Start","End","Strand"} { print "Peak"NR"_"$1":"$2"-"$3,$1,$2,$3,"."}' \
#      $dir/$genome/DESeq2/$peaksname.bed \
#      > $dir/$genome/DESeq2/$peaksname.saf
#
#      if [ ! -f $dir/$genome/DESeq2/$peaksname.saf ]; then
#          echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ creating peaks saf file"
#          mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
#          mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
#          exit 1
#      fi
#    fi
#  fi

  #Create featureCounts file
  if [[ "$step" == "correlate" ]] || [[ "$step" == "counts" ]]; then
    #First one here makes the tempfile and launches featureCount job.
    if [ ! -f $dir/$genome/DESeq2/$prefix\_featureCounts.txt ]; then
      if [ ! -f $dir/$genome/DESeq2/$prefix.tempfile1 ]; then
        echo "this too \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ will fade" > $dir/$genome/DESeq2/$prefix.tempfile1
        if [[ -z $dir ]] || [[ -z $genome ]] || [[ -z $alignment ]] || [[ -z $type ]] || [[ -z $prefix ]] || [[ -z $listfile ]] || [[ -z $peaksfile ]]; then
            echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ inputs did not pass to featureCounts.job correctly"
            mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
            mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
            exit 1
        fi

        sbatch /project/GCRB/Banaszynski_lab/shared/scripts/ryan_scripts/rna-seq/featureCounts.job \
        -o $dir \
        -g $genome \
        -a $alignment \
        -e $type \
        -p $prefix \
        -l $listfile \
        -b $peaksfile

        while [ ! -f $dir/$genome/DESeq2/$prefix\_featureCounts.txt ]
        do
          echo "$prefix\_featureCounts.txt is not finished... taking a nap! ヾ(   ￣ o ￣ )ﾂ "
          sleep 30m
        done

        rm $dir/$genome/DESeq2/$prefix.tempfile1
      fi
    fi

    #Check if featureCounts file is finished.
    while [ ! -f $dir/$genome/DESeq2/$prefix\_featureCounts.txt ]
    do
      echo "$prefix\_featureCounts.txt is not finished... taking a nap! ヾ(   ￣ o ￣ )ﾂ "
      sleep 30m
    done
  fi

  #Create Contrast file
  if [[ "$step" == "correlate" ]] || [[ "$step" == "counts" ]] || [[ "$step" == "deseq" ]]; then
    #First one here makes the tempfile and Contrast file.
    if [ ! -f $dir/$genome/DESeq2/$prefix.contrast ]; then
      if [ ! -f $dir/$genome/DESeq2/$prefix.tempfile2 ]; then
        echo "this too ヾ(∘⁼̴⃙̀˘ ^ ˘⁼̴⃙́∘ )ﾂ will fade" > $dir/$genome/DESeq2/$prefix.tempfile2
        while IFS=" " read -r path group
        do
          pfn=$(basename "${path}")
          name=${pfn%.*}
          echo echo | awk -v n="$name" -v g="$group" '{ print n" "g }' >> $dir/$genome/DESeq2/$prefix.contrast
        done < $listfile
        rm $dir/$genome/DESeq2/$prefix.tempfile2
      fi
    fi

    #Check if Contrast file is finished.
    while [ ! -f $dir/$genome/DESeq2/$prefix.contrast ]
    do
      echo "$dir/$genome/DESeq2/$prefix.contrast is not finished... taking a nap! ヾ(   ￣ o ￣ )ﾂ "
      sleep 1m
    done

    #Begin DESEQ2
    module load R/4.1.1-gccmkl
    Rscript /project/GCRB/Banaszynski_lab/shared/scripts/ryan_scripts/rna-seq/featureCounts_to_DESeq2_flex_v2.0.r \
    $dir/$genome/DESeq2 \
    $dir/$genome/DESeq2/$prefix.contrast \
    $dir/$genome/DESeq2/$prefix\_featureCounts.txt \
    $groupX $groupY \
    $prefix \
    $countthresh
    module unload R/4.1.1-gccmkl

    if [ ! -f $dir/$genome/DESeq2/$prefix\_$groupY\_vs_$groupX\_DESeq2.csv ]; then
      echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ DESeq2 failed "
      mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
      mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
      exit 1
    fi

    #Rerun refined
    if [ ! -f $dir/$genome/DESeq2/$prefix\_refined_featureCounts.txt ]; then
      if [ ! -f $dir/$genome/DESeq2/$prefix.tempfile3 ]; then
        echo "this too ヾ(∘⁼̴⃙̀˘ ^ ˘⁼̴⃙́∘ )ﾂ will fade" > $dir/$genome/DESeq2/$prefix.tempfile3
        tail -n +2 $dir/$genome/DESeq2/$prefix\_DESeq2_normalized_counts.txt \
        | awk -F',' '
        {
          max = $1
          for (i = 2; i <= NF; i++) {
            if ($i > max) {
              max = $i
            }
          }
        print $1,max
        }
        ' \
        | tr -d '"' | tr '_:-' ' ' | tr ' ' '\t' | cut -f 2,3,4,5 | sort -k1,1 -k2,2n > $dir/$genome/DESeq2/$prefix\_DESeq2_normalized_counts.maxval

        mediancount=$(cut -f 4 $dir/$genome/DESeq2/$prefix\_DESeq2_normalized_counts.maxval \
        | sort -n | awk '{all[NR] = $0} END{print all[int(NR*0.5)]}')
        #note: see /project/GCRB/Banaszynski_lab/shared/scripts/ryan_scripts/other/percentile.awk

        echo "the median of the regional maximum normalized counts is $mediancount"

        awk -v m="$mediancount" '{ if ($4 > m) print $0 }' \
        $dir/$genome/DESeq2/$prefix\_DESeq2_normalized_counts.maxval \
        > $dir/$genome/DESeq2/$prefix\_DESeq2_normalized_counts.maxvalpass

        pfn=$(basename "${peaksfile}")
        peaksname=${pfn%.*}

        module load bedtools
        grep -w \
        'chr1\|chr2\|chr3\|chr4\|chr5\|chr6\|chr7\|chr8\|chr9\|chr10\|chr11\|chr12\|chr13\|chr14\|chr15\|chr16\|chr17\|chr18\|chr19\|chr20\|chr21\|chr22\|chrX\|chrY' \
        $peaksfile \
        | bedtools merge -i - \
        > $dir/$genome/DESeq2/$peaksname.bed
        module unload bedtools

        if [ ! -f $dir/$genome/DESeq2/$peaksname.bed ]; then
          echo "error \(∘⁼̴⃙̀˘ ⌂ ˘⁼̴⃙́∘ )/ filtering peaks bedfile"
          mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
          mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err
          exit 1
        fi

        medianFDR=$(cut -f 4 $dir/$genome/DESeq2/$peaksname.bed \
        | sort -n | awk '{all[NR] = $0} END{print all[int(NR*0.5)]}')

        module load bedtools
        awk -v m="$medianFDR" '{ if ($4 > m) print $0 }' \
        $dir/$genome/DESeq2/$peaksname.bed \
        | bedtools intersect -u -a - -b $dir/$genome/DESeq2/$prefix\_DESeq2_normalized_counts.maxvalpass \
        | awk '{ print $0,$1":"$2"-"$3 }' \
        > $dir/$genome/DESeq2/$peaksname\_refined.bed
        module unload bedtools

        head -n 2 $dir/$genome/DESeq2/$prefix\_featureCounts.txt \
        > $dir/$genome/DESeq2/$prefix\_refined_featureCounts.temp

        while IFS=" " read -r bed name
        do
          grep $name $dir/$genome/DESeq2/$prefix\_featureCounts.txt >> $dir/$genome/DESeq2/$prefix\_refined_featureCounts.temp
        done < $dir/$genome/DESeq2/$peaksname\_refined.bed

        mv $dir/$genome/DESeq2/$prefix\_refined_featureCounts.temp $dir/$genome/DESeq2/$prefix\_refined_featureCounts.txt

        rm $dir/$genome/DESeq2/$prefix.tempfile3
        rm $dir/$genome/DESeq2/$prefix\_DESeq2_normalized_counts.maxval
        rm $dir/$genome/DESeq2/$prefix\_DESeq2_normalized_counts.maxvalpass
      fi
    fi

    #Check if featureCount refining is finished.
    while [ ! -f $dir/$genome/DESeq2/$prefix\_refined_featureCounts.txt ]
    do
      echo "$dir/$genome/DESeq2/$prefix\_refined_featureCounts.txt is not finished... taking a nap! ヾ(   ￣ o ￣ )ﾂ "
      sleep 1m
    done

    module load R/4.1.1-gccmkl
    Rscript /project/GCRB/Banaszynski_lab/shared/scripts/ryan_scripts/rna-seq/featureCounts_to_DESeq2_flex_v2.0.r \
    $dir/$genome/DESeq2 \
    $dir/$genome/DESeq2/$prefix.contrast \
    $dir/$genome/DESeq2/$prefix\_refined_featureCounts.txt \
    $groupX $groupY \
    $prefix\_refined \
    $countthresh
    module unload R/4.1.1-gccmkl

  fi

  mv serialJob.$SLURM_JOB_ID.out $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.out
  mv serialJob.$SLURM_JOB_ID.time $dir/out_files/serialJob.$SLURM_JOB_ID.DESeq2.$step.$prefix.err

}

main "$@"
